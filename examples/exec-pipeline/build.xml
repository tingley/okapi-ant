<project name="test" default="build" basedir="."
         xmlns:okapi="antlib:com.spartansoftwareinc.okapi.ant">

    <!-- Specify local Okapi install via OKAPI_HOME envar for portability,
       - or else hard code the path. -->
    <property environment="env"/>
    <condition property="okapi.lib" value="${env.OKAPI_HOME}/lib"
        else="/Applications/okapi-apps_cocoa-macosx-x86_64_0.28/lib">
        <isset property="env.OKAPI_HOME"/>
    </condition>

    <property name="src.dir" value="src" />
    <property name="config.dir" value="config" />
    <property name="build.dir" value="build" />

    <!-- okapi-ant needs both its own code and an Okapi installation to load. -->
    <path id="okapi.classpath">
        <fileset dir="${okapi.lib}" includes="**/*.jar" />
        <fileset dir="../../target" includes="okapi-ant-1.3-SNAPSHOT.jar" />
    </path>

    <!-- Load all the tasks in the okapi namespace. -->
    <taskdef uri="antlib:com.spartansoftwareinc.okapi.ant"
        resource="com/spartansoftwareinc/okapi/ant/antlib.xml"
        classpathref="okapi.classpath" />

    <target name="build">
        <!-- Create the output directory -->
        <mkdir dir="${build.dir}" />
        <okapi:exec-pipeline pipeline="${config.dir}/pipeline.pln" 
            srcLang="en" tgtLang="fr"
            srcEncoding="UTF-8" tgtEncoding="UTF-8" 
            filterConfigDir="${config.dir}"
            outputDir="${build.dir}">
            <!-- This can include custom configs, which will be loaded
               - from @filterConfigDir -->
            <filterMapping extension=".html" filterConfig="okf_html" />
            <fileset dir="${src.dir}" includes="*.html" />
        </okapi:exec-pipeline>
    </target>

    <target name="clean">
        <delete dir="${build.dir}" failonerror="false" />
    </target>

</project>
